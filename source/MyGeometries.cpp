//
//  MyGeometries.cpp
//
//   Sets up and renders 
//     - the ground plane, and
//     - the surface of rotation
//   for the Math 155A project #6.
//
// Use the static library (so glew32.dll is not needed):
#define GLEW_STATIC
#include <GL/glew.h> 
#include <GLFW/glfw3.h>
#include "LinearR3.h"		// Adjust path as needed.
#include "LinearR4.h"		// Adjust path as needed.
#include "MathMisc.h"       // Adjust path as needed
#include "MyGeometries.h"
#include "TextureProj.h"
#include "PhongData.h"
#include "RgbImage.h"
#include "GlGeomCylinder.h"
#include "GlGeomSphere.h"

#include "MathCustom.h"
// **********************************
// Material to underlie a texture map.
// YOU MAY DEFINE A SECOND ONE OF THESE IF YOU WISH
// **********************************
phMaterial materialUnderTexture;
// **************************
// Information for loading textures
// **************************
const int NumTextures = 3;
unsigned int TextureNames[NumTextures];     // Texture names generated by OpenGL
const char* TextureFiles[NumTextures] = {
	"bg.bmp", // wall texture
	"gnd.bmp", // ground texture
	"surf2.bmp", // polytope texture
};

// Values for this program
double polytopeScale = 0.1;
double vScale = 30.0;
double eScale = 20.0;
double shapeRadius = 1;
double shapeMin = 0.1;
double shapeMax = 3;
double shapeScale = 0.05;

const float sq2 = sqrtf(2);
const float sq3 = sqrtf(3);
const float sq5 = sqrtf(5);
const float sq6 = sqrtf(6);
const float sq10 = sqrtf(10);
const float phi = (1 + sq5) / 2;
float x_1; float x_2; float y_1; float y_2; float z_1; float z_2;
float normD;
float tW;
float wallScale = 4.82f;

// Lists of vertices and orderings in use
// Note: all vertices here list the unit polytope, centered at the origin
// simplex vertices
float simplexVerts[] = {
	-0.5,	-sq3 / 6,	-sq6 / 12,	0.0,
	0.5,	-sq3 / 6,	-sq6 / 12,	0.0,
	0.0,	sq3 / 3,	-sq6 / 12,	0.0,
	0.0,	0.0,		sq6 / 4,	0.0,
	0.0,	0.0,		0.0,		sq10 / 4,
};
// simplex edges: connections between vertex indices
int simplexOrdering[] = {
	0,1,	0,2,	0,3,	0,4,	1,2,	1,3,	1,4,	2,3,	2,4,	3,4,
};
// tesseract vertices
float tessVerts[] = {
	-0.5,-0.5,-0.5,-0.5,		0.5,-0.5,-0.5,-0.5,			0.5,0.5,-0.5,-0.5,			-0.5,0.5,-0.5,-0.5,
	-0.5,-0.5,0.5,-0.5,			0.5,-0.5,0.5,-0.5,			0.5,0.5,0.5,-0.5,			-0.5,0.5,0.5,-0.5,
	-0.5,-0.5,-0.5,0.5,			0.5,-0.5,-0.5,0.5,			0.5,0.5,-0.5,0.5,			-0.5,0.5,-0.5,0.5,
	-0.5,-0.5,0.5,0.5,			0.5,-0.5,0.5,0.5,			0.5,0.5,0.5,0.5,			-0.5,0.5,0.5,0.5,
};
// tesseract edges: connections between vertex indices
int tessOrdering[] = {
	0,1,	4,5,	7,6,	3,2,	8,9,	12,13,	15,14,	11,10,	// connections along x axis
	0,4,	1,5,	2,6,	3,7,	8,12,	9,13,	10,14,	11,15,	// connections along y axis
	0,3,	1,2,	5,6,	4,7,	8,11,	9,10,	13,14,	12,15,	// connections along z axis
	0,8,	1,9,	2,10,	3,11,	4,12,	5,13,	6,14,	7,15,	// connections along w axis
};
// orthoplex vertices
float orthoVerts[] = {
	1/sq2,0.0,0.0,0.0,	-1/sq2,0.0,0.0,0.0,
	0.0,1/sq2,0.0,0.0,	0.0,-1/sq2,0.0,0.0,
	0.0,0.0,1/sq2,0.0,	0.0,0.0,-1/sq2,0.0,
	0.0,0.0,0.0,1/sq2,	0.0,0.0,0.0,-1/sq2,
};
// orthoplex edges: connections between vertex indices
int orthoOrdering[] = {
	0,2,	0,3,	0,4,	0,5,	0,6,	0,7,
	1,2,	1,3,	1,4,	1,5,	1,6,	1,7,
	2,4,	2,5,	2,6,	2,7,
	3,4,	3,5,	3,6,	3,7,
	4,6,	4,7,
	5,6,	5,7,
};
// octaplex vertices
float octaVerts[] = {
	1.0,	0.0,	0.0,	0.0,		-1.0,	0.0,	0.0,	0.0,
	0.0,	1.0,	0.0,	0.0,		0.0,	-1.0,	0.0,	0.0,
	0.0,	0.0,	1.0,	0.0,		0.0,	0.0,	-1.0,	0.0,
	0.0,	0.0,	0.0,	1.0,		0.0,	0.0,	0.0,	-1.0,
	0.5,	0.5,	0.5,	0.5,		-0.5,	0.5,	0.5,	0.5,
	0.5,	-0.5,	0.5,	0.5,		-0.5,	-0.5,	0.5,	0.5,
	0.5,	0.5,	-0.5,	0.5,		-0.5,	0.5,	-0.5,	0.5,
	0.5,	-0.5,	-0.5,	0.5,		-0.5,	-0.5,	-0.5,	0.5,
	0.5,	0.5,	0.5,	-0.5,		-0.5,	0.5,	0.5,	-0.5,
	0.5,	-0.5,	0.5,	-0.5,		-0.5,	-0.5,	0.5,	-0.5,
	0.5,	0.5,	-0.5,	-0.5,		-0.5,	0.5,	-0.5,	-0.5,
	0.5,	-0.5,	-0.5,	-0.5,		-0.5,	-0.5,	-0.5,	-0.5,
};
// octaplex edges: connections between vertex indices
int octaOrdering[] = {
	0,8,	0,10,	0,12,	0,14,	0,16,	0,18,	0,20,	0,22,
	1,9,	1,11,	1,13,	1,15,	1,17,	1,19,	1,21,	1,23,
	2,8,	2,9,	2,12,	2,13,	2,16,	2,17,	2,20,	2,21,
	3,10,	3,11,	3,14,	3,15,	3,18,	3,19,	3,22,	3,23,
	4,8,	4,9,	4,10,	4,11,	4,16,	4,17,	4,18,	4,19,
	5,12,	5,13,	5,14,	5,15,	5,20,	5,21,	5,22,	5,23,
	8,9,	8,10,	9,11,	10,11,	12,13,	12,14,	13,15,	14,15,	8,12,	9,13,	10,14,	11,15,
	16,17,	16,18,	17,19,	18,19,	20,21,	20,22,	21,23,	22,23,	16,20,	17,21,	18,22,	19,23,
	6,8,	6,9,	6,10,	6,11,	6,12,	6,13,	6,14,	6,15,
	7,16,	7,17,	7,18,	7,19,	7,20,	7,21,	7,22,	7,23,
	8,16,	9,17,	10,18,	11,19,	12,20,	13,21,	14,22,	15,23,
};
// dodecaplex vertices
float dodecaVerts[] = {
	0,0,2,2,0,0,2,-2,0,0,-2,2,0,0,-2,-2,0,2,2,0,0,2,-2,0,0,-2,2,0,0,-2,-2,0,0,2,0,2,0,2,0,-2,0,-2,0,2,0,-2,0,-2,2,0,0,2,2,0,0,-2,-2,0,0,2,-2,0,0,-2,2,0,2,0,2,0,-2,0,-2,0,2,0,-2,0,-2,0,2,2,0,0,2,-2,0,0,-2,2,0,0,-2,-2,0,0,
	1,1,1,sq5,1,1,1,-sq5,1,1,-1,sq5,1,1,-1,-sq5,1,-1,1,sq5,1,-1,1,-sq5,1,-1,-1,sq5,1,-1,-1,-sq5,-1,1,1,sq5,-1,1,1,-sq5,-1,1,-1,sq5,-1,1,-1,-sq5,-1,-1,1,sq5,-1,-1,1,-sq5,-1,-1,-1,sq5,-1,-1,-1,-sq5,1,1,sq5,1,1,1,sq5,-1,1,1,-sq5,1,1,1,-sq5,-1,1,-1,sq5,1,1,-1,sq5,-1,1,-1,-sq5,1,1,-1,-sq5,-1,-1,1,sq5,1,-1,1,sq5,-1,-1,1,-sq5,1,-1,1,-sq5,-1,-1,-1,sq5,1,-1,-1,sq5,-1,-1,-1,-sq5,1,-1,-1,-sq5,-1,1,sq5,1,1,1,sq5,1,-1,1,sq5,-1,1,1,sq5,-1,-1,1,-sq5,1,1,1,-sq5,1,-1,1,-sq5,-1,1,1,-sq5,-1,-1,-1,sq5,1,1,-1,sq5,1,-1,-1,sq5,-1,1,-1,sq5,-1,-1,-1,-sq5,1,1,-1,-sq5,1,-1,-1,-sq5,-1,1,-1,-sq5,-1,-1,sq5,1,1,1,sq5,1,1,-1,sq5,1,-1,1,sq5,1,-1,-1,sq5,-1,1,1,sq5,-1,1,-1,sq5,-1,-1,1,sq5,-1,-1,-1,-sq5,1,1,1,-sq5,1,1,-1,-sq5,1,-1,1,-sq5,1,-1,-1,-sq5,-1,1,1,-sq5,-1,1,-1,-sq5,-1,-1,1,-sq5,-1,-1,-1,
	pow(phi,-2),phi,phi,phi,pow(phi,-2),phi,phi,-phi,pow(phi,-2),phi,-phi,phi,pow(phi,-2),phi,-phi,-phi,pow(phi,-2),-phi,phi,phi,pow(phi,-2),-phi,phi,-phi,pow(phi,-2),-phi,-phi,phi,pow(phi,-2),-phi,-phi,-phi,-pow(phi,-2),phi,phi,phi,-pow(phi,-2),phi,phi,-phi,-pow(phi,-2),phi,-phi,phi,-pow(phi,-2),phi,-phi,-phi,-pow(phi,-2),-phi,phi,phi,-pow(phi,-2),-phi,phi,-phi,-pow(phi,-2),-phi,-phi,phi,-pow(phi,-2),-phi,-phi,-phi,phi,pow(phi,-2),phi,phi,phi,pow(phi,-2),phi,-phi,phi,pow(phi,-2),-phi,phi,phi,pow(phi,-2),-phi,-phi,phi,-pow(phi,-2),phi,phi,phi,-pow(phi,-2),phi,-phi,phi,-pow(phi,-2),-phi,phi,phi,-pow(phi,-2),-phi,-phi,-phi,pow(phi,-2),phi,phi,-phi,pow(phi,-2),phi,-phi,-phi,pow(phi,-2),-phi,phi,-phi,pow(phi,-2),-phi,-phi,-phi,-pow(phi,-2),phi,phi,-phi,-pow(phi,-2),phi,-phi,-phi,-pow(phi,-2),-phi,phi,-phi,-pow(phi,-2),-phi,-phi,phi,phi,pow(phi,-2),phi,phi,phi,pow(phi,-2),-phi,phi,phi,-pow(phi,-2),phi,phi,phi,-pow(phi,-2),-phi,phi,-phi,pow(phi,-2),phi,phi,-phi,pow(phi,-2),-phi,phi,-phi,-pow(phi,-2),phi,phi,-phi,-pow(phi,-2),-phi,-phi,phi,pow(phi,-2),phi,-phi,phi,pow(phi,-2),-phi,-phi,phi,-pow(phi,-2),phi,-phi,phi,-pow(phi,-2),-phi,-phi,-phi,pow(phi,-2),phi,-phi,-phi,pow(phi,-2),-phi,-phi,-phi,-pow(phi,-2),phi,-phi,-phi,-pow(phi,-2),-phi,phi,phi,phi,pow(phi,-2),phi,phi,phi,-pow(phi,-2),phi,phi,-phi,pow(phi,-2),phi,phi,-phi,-pow(phi,-2),phi,-phi,phi,pow(phi,-2),phi,-phi,phi,-pow(phi,-2),phi,-phi,-phi,pow(phi,-2),phi,-phi,-phi,-pow(phi,-2),-phi,phi,phi,pow(phi,-2),-phi,phi,phi,-pow(phi,-2),-phi,phi,-phi,pow(phi,-2),-phi,phi,-phi,-pow(phi,-2),-phi,-phi,phi,pow(phi,-2),-phi,-phi,phi,-pow(phi,-2),-phi,-phi,-phi,pow(phi,-2),-phi,-phi,-phi,-pow(phi,-2),
	pow(phi,-1),pow(phi,-1),pow(phi,-1),pow(phi,2),pow(phi,-1),pow(phi,-1),pow(phi,-1),-pow(phi,2),pow(phi,-1),pow(phi,-1),-pow(phi,-1),pow(phi,2),pow(phi,-1),pow(phi,-1),-pow(phi,-1),-pow(phi,2),pow(phi,-1),-pow(phi,-1),pow(phi,-1),pow(phi,2),pow(phi,-1),-pow(phi,-1),pow(phi,-1),-pow(phi,2),pow(phi,-1),-pow(phi,-1),-pow(phi,-1),pow(phi,2),pow(phi,-1),-pow(phi,-1),-pow(phi,-1),-pow(phi,2),-pow(phi,-1),pow(phi,-1),pow(phi,-1),pow(phi,2),-pow(phi,-1),pow(phi,-1),pow(phi,-1),-pow(phi,2),-pow(phi,-1),pow(phi,-1),-pow(phi,-1),pow(phi,2),-pow(phi,-1),pow(phi,-1),-pow(phi,-1),-pow(phi,2),-pow(phi,-1),-pow(phi,-1),pow(phi,-1),pow(phi,2),-pow(phi,-1),-pow(phi,-1),pow(phi,-1),-pow(phi,2),-pow(phi,-1),-pow(phi,-1),-pow(phi,-1),pow(phi,2),-pow(phi,-1),-pow(phi,-1),-pow(phi,-1),-pow(phi,2),pow(phi,-1),pow(phi,-1),pow(phi,2),pow(phi,-1),pow(phi,-1),pow(phi,-1),pow(phi,2),-pow(phi,-1),pow(phi,-1),pow(phi,-1),-pow(phi,2),pow(phi,-1),pow(phi,-1),pow(phi,-1),-pow(phi,2),-pow(phi,-1),pow(phi,-1),-pow(phi,-1),pow(phi,2),pow(phi,-1),pow(phi,-1),-pow(phi,-1),pow(phi,2),-pow(phi,-1),pow(phi,-1),-pow(phi,-1),-pow(phi,2),pow(phi,-1),pow(phi,-1),-pow(phi,-1),-pow(phi,2),-pow(phi,-1),-pow(phi,-1),pow(phi,-1),pow(phi,2),pow(phi,-1),-pow(phi,-1),pow(phi,-1),pow(phi,2),-pow(phi,-1),-pow(phi,-1),pow(phi,-1),-pow(phi,2),pow(phi,-1),-pow(phi,-1),pow(phi,-1),-pow(phi,2),-pow(phi,-1),-pow(phi,-1),-pow(phi,-1),pow(phi,2),pow(phi,-1),-pow(phi,-1),-pow(phi,-1),pow(phi,2),-pow(phi,-1),-pow(phi,-1),-pow(phi,-1),-pow(phi,2),pow(phi,-1),-pow(phi,-1),-pow(phi,-1),-pow(phi,2),-pow(phi,-1),pow(phi,-1),pow(phi,2),pow(phi,-1),pow(phi,-1),pow(phi,-1),pow(phi,2),pow(phi,-1),-pow(phi,-1),pow(phi,-1),pow(phi,2),-pow(phi,-1),pow(phi,-1),pow(phi,-1),pow(phi,2),-pow(phi,-1),-pow(phi,-1),pow(phi,-1),-pow(phi,2),pow(phi,-1),pow(phi,-1),pow(phi,-1),-pow(phi,2),pow(phi,-1),-pow(phi,-1),pow(phi,-1),-pow(phi,2),-pow(phi,-1),pow(phi,-1),pow(phi,-1),-pow(phi,2),-pow(phi,-1),-pow(phi,-1),-pow(phi,-1),pow(phi,2),pow(phi,-1),pow(phi,-1),-pow(phi,-1),pow(phi,2),pow(phi,-1),-pow(phi,-1),-pow(phi,-1),pow(phi,2),-pow(phi,-1),pow(phi,-1),-pow(phi,-1),pow(phi,2),-pow(phi,-1),-pow(phi,-1),-pow(phi,-1),-pow(phi,2),pow(phi,-1),pow(phi,-1),-pow(phi,-1),-pow(phi,2),pow(phi,-1),-pow(phi,-1),-pow(phi,-1),-pow(phi,2),-pow(phi,-1),pow(phi,-1),-pow(phi,-1),-pow(phi,2),-pow(phi,-1),-pow(phi,-1),pow(phi,2),pow(phi,-1),pow(phi,-1),pow(phi,-1),pow(phi,2),pow(phi,-1),pow(phi,-1),-pow(phi,-1),pow(phi,2),pow(phi,-1),-pow(phi,-1),pow(phi,-1),pow(phi,2),pow(phi,-1),-pow(phi,-1),-pow(phi,-1),pow(phi,2),-pow(phi,-1),pow(phi,-1),pow(phi,-1),pow(phi,2),-pow(phi,-1),pow(phi,-1),-pow(phi,-1),pow(phi,2),-pow(phi,-1),-pow(phi,-1),pow(phi,-1),pow(phi,2),-pow(phi,-1),-pow(phi,-1),-pow(phi,-1),-pow(phi,2),pow(phi,-1),pow(phi,-1),pow(phi,-1),-pow(phi,2),pow(phi,-1),pow(phi,-1),-pow(phi,-1),-pow(phi,2),pow(phi,-1),-pow(phi,-1),pow(phi,-1),-pow(phi,2),pow(phi,-1),-pow(phi,-1),-pow(phi,-1),-pow(phi,2),-pow(phi,-1),pow(phi,-1),pow(phi,-1),-pow(phi,2),-pow(phi,-1),pow(phi,-1),-pow(phi,-1),-pow(phi,2),-pow(phi,-1),-pow(phi,-1),pow(phi,-1),-pow(phi,2),-pow(phi,-1),-pow(phi,-1),-pow(phi,-1),
	0,pow(phi,-2),1,pow(phi,2),0,pow(phi,-2),1,-pow(phi,2),0,pow(phi,-2),-1,pow(phi,2),0,pow(phi,-2),-1,-pow(phi,2),0,-pow(phi,-2),1,pow(phi,2),0,-pow(phi,-2),1,-pow(phi,2),0,-pow(phi,-2),-1,pow(phi,2),0,-pow(phi,-2),-1,-pow(phi,2),0,1,pow(phi,2),pow(phi,-2),0,1,pow(phi,2),-pow(phi,-2),0,1,-pow(phi,2),pow(phi,-2),0,1,-pow(phi,2),-pow(phi,-2),0,-1,pow(phi,2),pow(phi,-2),0,-1,pow(phi,2),-pow(phi,-2),0,-1,-pow(phi,2),pow(phi,-2),0,-1,-pow(phi,2),-pow(phi,-2),0,pow(phi,2),pow(phi,-2),1,0,pow(phi,2),pow(phi,-2),-1,0,pow(phi,2),-pow(phi,-2),1,0,pow(phi,2),-pow(phi,-2),-1,0,-pow(phi,2),pow(phi,-2),1,0,-pow(phi,2),pow(phi,-2),-1,0,-pow(phi,2),-pow(phi,-2),1,0,-pow(phi,2),-pow(phi,-2),-1,pow(phi,-2),0,pow(phi,2),1,pow(phi,-2),0,pow(phi,2),-1,pow(phi,-2),0,-pow(phi,2),1,pow(phi,-2),0,-pow(phi,2),-1,-pow(phi,-2),0,pow(phi,2),1,-pow(phi,-2),0,pow(phi,2),-1,-pow(phi,-2),0,-pow(phi,2),1,-pow(phi,-2),0,-pow(phi,2),-1,pow(phi,-2),1,0,pow(phi,2),pow(phi,-2),1,0,-pow(phi,2),pow(phi,-2),-1,0,pow(phi,2),pow(phi,-2),-1,0,-pow(phi,2),-pow(phi,-2),1,0,pow(phi,2),-pow(phi,-2),1,0,-pow(phi,2),-pow(phi,-2),-1,0,pow(phi,2),-pow(phi,-2),-1,0,-pow(phi,2),pow(phi,-2),pow(phi,2),1,0,pow(phi,-2),pow(phi,2),-1,0,pow(phi,-2),-pow(phi,2),1,0,pow(phi,-2),-pow(phi,2),-1,0,-pow(phi,-2),pow(phi,2),1,0,-pow(phi,-2),pow(phi,2),-1,0,-pow(phi,-2),-pow(phi,2),1,0,-pow(phi,-2),-pow(phi,2),-1,0,1,0,pow(phi,-2),pow(phi,2),1,0,pow(phi,-2),-pow(phi,2),1,0,-pow(phi,-2),pow(phi,2),1,0,-pow(phi,-2),-pow(phi,2),-1,0,pow(phi,-2),pow(phi,2),-1,0,pow(phi,-2),-pow(phi,2),-1,0,-pow(phi,-2),pow(phi,2),-1,0,-pow(phi,-2),-pow(phi,2),1,pow(phi,-2),pow(phi,2),0,1,pow(phi,-2),-pow(phi,2),0,1,-pow(phi,-2),pow(phi,2),0,1,-pow(phi,-2),-pow(phi,2),0,-1,pow(phi,-2),pow(phi,2),0,-1,pow(phi,-2),-pow(phi,2),0,-1,-pow(phi,-2),pow(phi,2),0,-1,-pow(phi,-2),-pow(phi,2),0,1,pow(phi,2),0,pow(phi,-2),1,pow(phi,2),0,-pow(phi,-2),1,-pow(phi,2),0,pow(phi,-2),1,-pow(phi,2),0,-pow(phi,-2),-1,pow(phi,2),0,pow(phi,-2),-1,pow(phi,2),0,-pow(phi,-2),-1,-pow(phi,2),0,pow(phi,-2),-1,-pow(phi,2),0,-pow(phi,-2),pow(phi,2),0,1,pow(phi,-2),pow(phi,2),0,1,-pow(phi,-2),pow(phi,2),0,-1,pow(phi,-2),pow(phi,2),0,-1,-pow(phi,-2),-pow(phi,2),0,1,pow(phi,-2),-pow(phi,2),0,1,-pow(phi,-2),-pow(phi,2),0,-1,pow(phi,-2),-pow(phi,2),0,-1,-pow(phi,-2),pow(phi,2),pow(phi,-2),0,1,pow(phi,2),pow(phi,-2),0,-1,pow(phi,2),-pow(phi,-2),0,1,pow(phi,2),-pow(phi,-2),0,-1,-pow(phi,2),pow(phi,-2),0,1,-pow(phi,2),pow(phi,-2),0,-1,-pow(phi,2),-pow(phi,-2),0,1,-pow(phi,2),-pow(phi,-2),0,-1,pow(phi,2),1,pow(phi,-2),0,pow(phi,2),1,-pow(phi,-2),0,pow(phi,2),-1,pow(phi,-2),0,pow(phi,2),-1,-pow(phi,-2),0,-pow(phi,2),1,pow(phi,-2),0,-pow(phi,2),1,-pow(phi,-2),0,-pow(phi,2),-1,pow(phi,-2),0,-pow(phi,2),-1,-pow(phi,-2),0,
	0,pow(phi,-1),phi,sq5,0,pow(phi,-1),phi,-sq5,0,pow(phi,-1),-phi,sq5,0,pow(phi,-1),-phi,-sq5,0,-pow(phi,-1),phi,sq5,0,-pow(phi,-1),phi,-sq5,0,-pow(phi,-1),-phi,sq5,0,-pow(phi,-1),-phi,-sq5,0,phi,sq5,pow(phi,-1),0,phi,sq5,-pow(phi,-1),0,phi,-sq5,pow(phi,-1),0,phi,-sq5,-pow(phi,-1),0,-phi,sq5,pow(phi,-1),0,-phi,sq5,-pow(phi,-1),0,-phi,-sq5,pow(phi,-1),0,-phi,-sq5,-pow(phi,-1),0,sq5,pow(phi,-1),phi,0,sq5,pow(phi,-1),-phi,0,sq5,-pow(phi,-1),phi,0,sq5,-pow(phi,-1),-phi,0,-sq5,pow(phi,-1),phi,0,-sq5,pow(phi,-1),-phi,0,-sq5,-pow(phi,-1),phi,0,-sq5,-pow(phi,-1),-phi,pow(phi,-1),0,sq5,phi,pow(phi,-1),0,sq5,-phi,pow(phi,-1),0,-sq5,phi,pow(phi,-1),0,-sq5,-phi,-pow(phi,-1),0,sq5,phi,-pow(phi,-1),0,sq5,-phi,-pow(phi,-1),0,-sq5,phi,-pow(phi,-1),0,-sq5,-phi,pow(phi,-1),phi,0,sq5,pow(phi,-1),phi,0,-sq5,pow(phi,-1),-phi,0,sq5,pow(phi,-1),-phi,0,-sq5,-pow(phi,-1),phi,0,sq5,-pow(phi,-1),phi,0,-sq5,-pow(phi,-1),-phi,0,sq5,-pow(phi,-1),-phi,0,-sq5,pow(phi,-1),sq5,phi,0,pow(phi,-1),sq5,-phi,0,pow(phi,-1),-sq5,phi,0,pow(phi,-1),-sq5,-phi,0,-pow(phi,-1),sq5,phi,0,-pow(phi,-1),sq5,-phi,0,-pow(phi,-1),-sq5,phi,0,-pow(phi,-1),-sq5,-phi,0,phi,0,pow(phi,-1),sq5,phi,0,pow(phi,-1),-sq5,phi,0,-pow(phi,-1),sq5,phi,0,-pow(phi,-1),-sq5,-phi,0,pow(phi,-1),sq5,-phi,0,pow(phi,-1),-sq5,-phi,0,-pow(phi,-1),sq5,-phi,0,-pow(phi,-1),-sq5,phi,pow(phi,-1),sq5,0,phi,pow(phi,-1),-sq5,0,phi,-pow(phi,-1),sq5,0,phi,-pow(phi,-1),-sq5,0,-phi,pow(phi,-1),sq5,0,-phi,pow(phi,-1),-sq5,0,-phi,-pow(phi,-1),sq5,0,-phi,-pow(phi,-1),-sq5,0,phi,sq5,0,pow(phi,-1),phi,sq5,0,-pow(phi,-1),phi,-sq5,0,pow(phi,-1),phi,-sq5,0,-pow(phi,-1),-phi,sq5,0,pow(phi,-1),-phi,sq5,0,-pow(phi,-1),-phi,-sq5,0,pow(phi,-1),-phi,-sq5,0,-pow(phi,-1),sq5,0,phi,pow(phi,-1),sq5,0,phi,-pow(phi,-1),sq5,0,-phi,pow(phi,-1),sq5,0,-phi,-pow(phi,-1),-sq5,0,phi,pow(phi,-1),-sq5,0,phi,-pow(phi,-1),-sq5,0,-phi,pow(phi,-1),-sq5,0,-phi,-pow(phi,-1),sq5,pow(phi,-1),0,phi,sq5,pow(phi,-1),0,-phi,sq5,-pow(phi,-1),0,phi,sq5,-pow(phi,-1),0,-phi,-sq5,pow(phi,-1),0,phi,-sq5,pow(phi,-1),0,-phi,-sq5,-pow(phi,-1),0,phi,-sq5,-pow(phi,-1),0,-phi,sq5,phi,pow(phi,-1),0,sq5,phi,-pow(phi,-1),0,sq5,-phi,pow(phi,-1),0,sq5,-phi,-pow(phi,-1),0,-sq5,phi,pow(phi,-1),0,-sq5,phi,-pow(phi,-1),0,-sq5,-phi,pow(phi,-1),0,-sq5,-phi,-pow(phi,-1),0,
	pow(phi,-1),1,phi,2,pow(phi,-1),1,phi,-2,pow(phi,-1),1,-phi,2,pow(phi,-1),1,-phi,-2,pow(phi,-1),-1,phi,2,pow(phi,-1),-1,phi,-2,pow(phi,-1),-1,-phi,2,pow(phi,-1),-1,-phi,-2,-pow(phi,-1),1,phi,2,-pow(phi,-1),1,phi,-2,-pow(phi,-1),1,-phi,2,-pow(phi,-1),1,-phi,-2,-pow(phi,-1),-1,phi,2,-pow(phi,-1),-1,phi,-2,-pow(phi,-1),-1,-phi,2,-pow(phi,-1),-1,-phi,-2,pow(phi,-1),phi,2,1,pow(phi,-1),phi,2,-1,pow(phi,-1),phi,-2,1,pow(phi,-1),phi,-2,-1,pow(phi,-1),-phi,2,1,pow(phi,-1),-phi,2,-1,pow(phi,-1),-phi,-2,1,pow(phi,-1),-phi,-2,-1,-pow(phi,-1),phi,2,1,-pow(phi,-1),phi,2,-1,-pow(phi,-1),phi,-2,1,-pow(phi,-1),phi,-2,-1,-pow(phi,-1),-phi,2,1,-pow(phi,-1),-phi,2,-1,-pow(phi,-1),-phi,-2,1,-pow(phi,-1),-phi,-2,-1,pow(phi,-1),2,1,phi,pow(phi,-1),2,1,-phi,pow(phi,-1),2,-1,phi,pow(phi,-1),2,-1,-phi,pow(phi,-1),-2,1,phi,pow(phi,-1),-2,1,-phi,pow(phi,-1),-2,-1,phi,pow(phi,-1),-2,-1,-phi,-pow(phi,-1),2,1,phi,-pow(phi,-1),2,1,-phi,-pow(phi,-1),2,-1,phi,-pow(phi,-1),2,-1,-phi,-pow(phi,-1),-2,1,phi,-pow(phi,-1),-2,1,-phi,-pow(phi,-1),-2,-1,phi,-pow(phi,-1),-2,-1,-phi,1,pow(phi,-1),2,phi,1,pow(phi,-1),2,-phi,1,pow(phi,-1),-2,phi,1,pow(phi,-1),-2,-phi,1,-pow(phi,-1),2,phi,1,-pow(phi,-1),2,-phi,1,-pow(phi,-1),-2,phi,1,-pow(phi,-1),-2,-phi,-1,pow(phi,-1),2,phi,-1,pow(phi,-1),2,-phi,-1,pow(phi,-1),-2,phi,-1,pow(phi,-1),-2,-phi,-1,-pow(phi,-1),2,phi,-1,-pow(phi,-1),2,-phi,-1,-pow(phi,-1),-2,phi,-1,-pow(phi,-1),-2,-phi,1,phi,pow(phi,-1),2,1,phi,pow(phi,-1),-2,1,phi,-pow(phi,-1),2,1,phi,-pow(phi,-1),-2,1,-phi,pow(phi,-1),2,1,-phi,pow(phi,-1),-2,1,-phi,-pow(phi,-1),2,1,-phi,-pow(phi,-1),-2,-1,phi,pow(phi,-1),2,-1,phi,pow(phi,-1),-2,-1,phi,-pow(phi,-1),2,-1,phi,-pow(phi,-1),-2,-1,-phi,pow(phi,-1),2,-1,-phi,pow(phi,-1),-2,-1,-phi,-pow(phi,-1),2,-1,-phi,-pow(phi,-1),-2,1,2,phi,pow(phi,-1),1,2,phi,-pow(phi,-1),1,2,-phi,pow(phi,-1),1,2,-phi,-pow(phi,-1),1,-2,phi,pow(phi,-1),1,-2,phi,-pow(phi,-1),1,-2,-phi,pow(phi,-1),1,-2,-phi,-pow(phi,-1),-1,2,phi,pow(phi,-1),-1,2,phi,-pow(phi,-1),-1,2,-phi,pow(phi,-1),-1,2,-phi,-pow(phi,-1),-1,-2,phi,pow(phi,-1),-1,-2,phi,-pow(phi,-1),-1,-2,-phi,pow(phi,-1),-1,-2,-phi,-pow(phi,-1),phi,pow(phi,-1),1,2,phi,pow(phi,-1),1,-2,phi,pow(phi,-1),-1,2,phi,pow(phi,-1),-1,-2,phi,-pow(phi,-1),1,2,phi,-pow(phi,-1),1,-2,phi,-pow(phi,-1),-1,2,phi,-pow(phi,-1),-1,-2,-phi,pow(phi,-1),1,2,-phi,pow(phi,-1),1,-2,-phi,pow(phi,-1),-1,2,-phi,pow(phi,-1),-1,-2,-phi,-pow(phi,-1),1,2,-phi,-pow(phi,-1),1,-2,-phi,-pow(phi,-1),-1,2,-phi,-pow(phi,-1),-1,-2,phi,1,2,pow(phi,-1),phi,1,2,-pow(phi,-1),phi,1,-2,pow(phi,-1),phi,1,-2,-pow(phi,-1),phi,-1,2,pow(phi,-1),phi,-1,2,-pow(phi,-1),phi,-1,-2,pow(phi,-1),phi,-1,-2,-pow(phi,-1),-phi,1,2,pow(phi,-1),-phi,1,2,-pow(phi,-1),-phi,1,-2,pow(phi,-1),-phi,1,-2,-pow(phi,-1),-phi,-1,2,pow(phi,-1),-phi,-1,2,-pow(phi,-1),-phi,-1,-2,pow(phi,-1),-phi,-1,-2,-pow(phi,-1),phi,2,pow(phi,-1),1,phi,2,pow(phi,-1),-1,phi,2,-pow(phi,-1),1,phi,2,-pow(phi,-1),-1,phi,-2,pow(phi,-1),1,phi,-2,pow(phi,-1),-1,phi,-2,-pow(phi,-1),1,phi,-2,-pow(phi,-1),-1,-phi,2,pow(phi,-1),1,-phi,2,pow(phi,-1),-1,-phi,2,-pow(phi,-1),1,-phi,2,-pow(phi,-1),-1,-phi,-2,pow(phi,-1),1,-phi,-2,pow(phi,-1),-1,-phi,-2,-pow(phi,-1),1,-phi,-2,-pow(phi,-1),-1,2,pow(phi,-1),phi,1,2,pow(phi,-1),phi,-1,2,pow(phi,-1),-phi,1,2,pow(phi,-1),-phi,-1,2,-pow(phi,-1),phi,1,2,-pow(phi,-1),phi,-1,2,-pow(phi,-1),-phi,1,2,-pow(phi,-1),-phi,-1,-2,pow(phi,-1),phi,1,-2,pow(phi,-1),phi,-1,-2,pow(phi,-1),-phi,1,-2,pow(phi,-1),-phi,-1,-2,-pow(phi,-1),phi,1,-2,-pow(phi,-1),phi,-1,-2,-pow(phi,-1),-phi,1,-2,-pow(phi,-1),-phi,-1,2,1,pow(phi,-1),phi,2,1,pow(phi,-1),-phi,2,1,-pow(phi,-1),phi,2,1,-pow(phi,-1),-phi,2,-1,pow(phi,-1),phi,2,-1,pow(phi,-1),-phi,2,-1,-pow(phi,-1),phi,2,-1,-pow(phi,-1),-phi,-2,1,pow(phi,-1),phi,-2,1,pow(phi,-1),-phi,-2,1,-pow(phi,-1),phi,-2,1,-pow(phi,-1),-phi,-2,-1,pow(phi,-1),phi,-2,-1,pow(phi,-1),-phi,-2,-1,-pow(phi,-1),phi,-2,-1,-pow(phi,-1),-phi,2,phi,1,pow(phi,-1),2,phi,1,-pow(phi,-1),2,phi,-1,pow(phi,-1),2,phi,-1,-pow(phi,-1),2,-phi,1,pow(phi,-1),2,-phi,1,-pow(phi,-1),2,-phi,-1,pow(phi,-1),2,-phi,-1,-pow(phi,-1),-2,phi,1,pow(phi,-1),-2,phi,1,-pow(phi,-1),-2,phi,-1,pow(phi,-1),-2,phi,-1,-pow(phi,-1),-2,-phi,1,pow(phi,-1),-2,-phi,1,-pow(phi,-1),-2,-phi,-1,pow(phi,-1),-2,-phi,-1,-pow(phi,-1),
};
// dodecaplex edges: connections between vertex indices
int dodecaOrdering[] = {
	0,312,0,316,0,336,0,340,1,313,1,317,1,337,1,341,2,314,2,318,2,338,2,342,3,315,3,319,3,339,3,343,4,320,4,321,4,352,4,356,5,322,5,323,5,353,5,357,6,324,6,325,6,354,6,358,7,326,7,327,7,355,7,359,8,328,8,330,8,344,8,348,9,329,9,331,9,345,9,349,10,332,10,334,10,346,10,350,11,333,11,335,11,347,11,351,12,360,12,362,12,392,12,394,13,361,13,363,13,393,13,395,14,364,14,366,14,396,14,398,15,365,15,367,15,397,15,399,16,368,16,370,16,384,16,385,17,369,17,371,17,386,17,387,18,372,18,374,18,388,18,389,19,373,19,375,19,390,19,391,20,376,20,377,20,400,20,401,21,378,21,379,21,402,21,403,22,380,22,381,22,404,22,405,23,382,23,383,23,406,23,407,24,152,24,408,24,472,24,504,25,153,25,409,25,473,25,505,26,154,26,410,26,474,26,506,27,155,27,411,27,475,27,507,28,156,28,412,28,476,28,508,29,157,29,413,29,477,29,509,30,158,30,414,30,478,30,510,31,159,31,415,31,479,31,511,32,160,32,416,32,480,32,512,33,161,33,417,33,481,33,513,34,162,34,418,34,482,34,514,35,163,35,419,35,483,35,515,36,164,36,420,36,484,36,516,37,165,37,421,37,485,37,517,38,166,38,422,38,486,38,518,39,167,39,423,39,487,39,519,40,168,40,424,40,456,40,520,41,169,41,425,41,457,41,521,42,170,42,426,42,458,42,522,43,171,43,427,43,459,43,523,44,172,44,428,44,460,44,524,45,173,45,429,45,461,45,525,46,174,46,430,46,462,46,526,47,175,47,431,47,463,47,527,48,176,48,432,48,464,48,528,49,177,49,433,49,465,49,529,50,178,50,434,50,466,50,530,51,179,51,435,51,467,51,531,52,180,52,436,52,468,52,532,53,181,53,437,53,469,53,533,54,182,54,438,54,470,54,534,55,183,55,439,55,471,55,535,56,184,56,440,56,488,56,536,57,185,57,441,57,489,57,537,58,186,58,442,58,490,58,538,59,187,59,443,59,491,59,539,60,188,60,444,60,492,60,540,61,189,61,445,61,493,61,541,62,190,62,446,62,494,62,542,63,191,63,447,63,495,63,543,64,192,64,448,64,496,64,544,65,193,65,449,65,497,65,545,66,194,66,450,66,498,66,546,67,195,67,451,67,499,67,547,68,196,68,452,68,500,68,548,69,197,69,453,69,501,69,549,70,198,70,454,70,502,70,550,71,199,71,455,71,503,71,551,72,200,72,552,72,568,72,584,73,201,73,553,73,569,73,585,74,202,74,554,74,570,74,586,75,203,75,555,75,571,75,587,76,204,76,556,76,572,76,588,77,205,77,557,77,573,77,589,78,206,78,558,78,574,78,590,79,207,79,559,79,575,79,591,80,208,80,560,80,576,80,592,81,209,81,561,81,577,81,593,82,210,82,562,82,578,82,594,83,211,83,563,83,579,83,595,84,212,84,564,84,580,84,596,85,213,85,565,85,581,85,597,86,214,86,566,86,582,86,598,87,215,87,567,87,583,87,599,88,96,88,408,88,424,88,440,89,97,89,409,89,425,89,441,90,98,90,410,90,426,90,442,91,99,91,411,91,427,91,443,92,100,92,412,92,428,92,444,93,101,93,413,93,429,93,445,94,102,94,414,94,430,94,446,95,103,95,415,95,431,95,447,96,416,96,432,96,448,97,417,97,433,97,449,98,418,98,434,98,450,99,419,99,435,99,451,100,420,100,436,100,452,101,421,101,437,101,453,102,422,102,438,102,454,103,423,103,439,103,455,104,108,104,456,104,504,104,552,105,109,105,457,105,505,105,553,106,110,106,458,106,506,106,554,107,111,107,459,107,507,107,555,108,460,108,508,108,556,109,461,109,509,109,557,110,462,110,510,110,558,111,463,111,511,111,559,112,116,112,464,112,512,112,560,113,117,113,465,113,513,113,561,114,118,114,466,114,514,114,562,115,119,115,467,115,515,115,563,116,468,116,516,116,564,117,469,117,517,117,565,118,470,118,518,118,566,119,471,119,519,119,567,120,122,120,472,120,536,120,568,121,123,121,473,121,537,121,569,122,474,122,538,122,570,123,475,123,539,123,571,124,126,124,476,124,540,124,572,125,127,125,477,125,541,125,573,126,478,126,542,126,574,127,479,127,543,127,575,128,130,128,480,128,544,128,576,129,131,129,481,129,545,129,577,130,482,130,546,130,578,131,483,131,547,131,579,132,134,132,484,132,548,132,580,133,135,133,485,133,549,133,581,134,486,134,550,134,582,135,487,135,551,135,583,136,137,136,488,136,520,136,584,137,489,137,521,137,585,138,139,138,490,138,522,138,586,139,491,139,523,139,587,140,141,140,492,140,524,140,588,141,493,141,525,141,589,142,143,142,494,142,526,142,590,143,495,143,527,143,591,144,145,144,496,144,528,144,592,145,497,145,529,145,593,146,147,146,498,146,530,146,594,147,499,147,531,147,595,148,149,148,500,148,532,148,596,149,501,149,533,149,597,150,151,150,502,150,534,150,598,151,503,151,535,151,599,152,216,152,248,152,264,153,217,153,249,153,265,154,218,154,248,154,266,155,219,155,249,155,267,156,220,156,250,156,264,157,221,157,251,157,265,158,222,158,250,158,266,159,223,159,251,159,267,160,216,160,252,160,268,161,217,161,253,161,269,162,218,162,252,162,270,163,219,163,253,163,271,164,220,164,254,164,268,165,221,165,255,165,269,166,222,166,254,166,270,167,223,167,255,167,271,168,224,168,240,168,272,169,225,169,241,169,272,170,226,170,242,170,273,171,227,171,243,171,273,172,228,172,240,172,274,173,229,173,241,173,274,174,230,174,242,174,275,175,231,175,243,175,275,176,224,176,244,176,276,177,225,177,245,177,276,178,226,178,246,178,277,179,227,179,247,179,277,180,228,180,244,180,278,181,229,181,245,181,278,182,230,182,246,182,279,183,231,183,247,183,279,184,232,184,256,184,280,185,233,185,256,185,281,186,234,186,257,186,280,187,235,187,257,187,281,188,236,188,258,188,282,189,237,189,258,189,283,190,238,190,259,190,282,191,239,191,259,191,283,192,232,192,260,192,284,193,233,193,260,193,285,194,234,194,261,194,284,195,235,195,261,195,285,196,236,196,262,196,286,197,237,197,262,197,287,198,238,198,263,198,286,199,239,199,263,199,287,200,288,200,296,200,304,201,289,201,297,201,304,202,290,202,296,202,305,203,291,203,297,203,305,204,288,204,298,204,306,205,289,205,299,205,306,206,290,206,298,206,307,207,291,207,299,207,307,208,292,208,300,208,308,209,293,209,301,209,308,210,294,210,300,210,309,211,295,211,301,211,309,212,292,212,302,212,310,213,293,213,303,213,310,214,294,214,302,214,311,215,295,215,303,215,311,216,220,216,312,217,221,217,313,218,222,218,314,219,223,219,315,220,316,221,317,222,318,223,319,224,225,224,320,225,321,226,227,226,322,227,323,228,229,228,324,229,325,230,231,230,326,231,327,232,234,232,328,233,235,233,329,234,330,235,331,236,238,236,332,237,239,237,333,238,334,239,335,240,244,240,336,241,245,241,337,242,246,242,338,243,247,243,339,244,340,245,341,246,342,247,343,248,252,248,344,249,253,249,345,250,254,250,346,251,255,251,347,252,348,253,349,254,350,255,351,256,260,256,352,257,261,257,353,258,262,258,354,259,263,259,355,260,356,261,357,262,358,263,359,264,266,264,360,265,267,265,361,266,362,267,363,268,270,268,364,269,271,269,365,270,366,271,367,272,274,272,368,273,275,273,369,274,370,275,371,276,278,276,372,277,279,277,373,278,374,279,375,280,281,280,376,281,377,282,283,282,378,283,379,284,285,284,380,285,381,286,287,286,382,287,383,288,289,288,384,289,385,290,291,290,386,291,387,292,293,292,388,293,389,294,295,294,390,295,391,296,298,296,392,297,299,297,393,298,394,299,395,300,302,300,396,301,303,301,397,302,398,303,399,304,305,304,400,305,401,306,307,306,402,307,403,308,309,308,404,309,405,310,311,310,406,311,407,312,408,312,416,313,409,313,417,314,410,314,418,315,411,315,419,316,412,316,420,317,413,317,421,318,414,318,422,319,415,319,423,320,424,320,432,321,425,321,433,322,426,322,434,323,427,323,435,324,428,324,436,325,429,325,437,326,430,326,438,327,431,327,439,328,440,328,448,329,441,329,449,330,442,330,450,331,443,331,451,332,444,332,452,333,445,333,453,334,446,334,454,335,447,335,455,336,456,336,460,337,457,337,461,338,458,338,462,339,459,339,463,340,464,340,468,341,465,341,469,342,466,342,470,343,467,343,471,344,472,344,474,345,473,345,475,346,476,346,478,347,477,347,479,348,480,348,482,349,481,349,483,350,484,350,486,351,485,351,487,352,488,352,489,353,490,353,491,354,492,354,493,355,494,355,495,356,496,356,497,357,498,357,499,358,500,358,501,359,502,359,503,360,504,360,508,361,505,361,509,362,506,362,510,363,507,363,511,364,512,364,516,365,513,365,517,366,514,366,518,367,515,367,519,368,520,368,521,369,522,369,523,370,524,370,525,371,526,371,527,372,528,372,529,373,530,373,531,374,532,374,533,375,534,375,535,376,536,376,538,377,537,377,539,378,540,378,542,379,541,379,543,380,544,380,546,381,545,381,547,382,548,382,550,383,549,383,551,384,552,384,556,385,553,385,557,386,554,386,558,387,555,387,559,388,560,388,564,389,561,389,565,390,562,390,566,391,563,391,567,392,568,392,570,393,569,393,571,394,572,394,574,395,573,395,575,396,576,396,578,397,577,397,579,398,580,398,582,399,581,399,583,400,584,400,585,401,586,401,587,402,588,402,589,403,590,403,591,404,592,404,593,405,594,405,595,406,596,406,597,407,598,407,599,408,456,409,457,410,458,411,459,412,460,413,461,414,462,415,463,416,464,417,465,418,466,419,467,420,468,421,469,422,470,423,471,424,488,425,489,426,490,427,491,428,492,429,493,430,494,431,495,432,496,433,497,434,498,435,499,436,500,437,501,438,502,439,503,440,472,441,473,442,474,443,475,444,476,445,477,446,478,447,479,448,480,449,481,450,482,451,483,452,484,453,485,454,486,455,487,504,568,505,569,506,570,507,571,508,572,509,573,510,574,511,575,512,576,513,577,514,578,515,579,516,580,517,581,518,582,519,583,520,552,521,553,522,554,523,555,524,556,525,557,526,558,527,559,528,560,529,561,530,562,531,563,532,564,533,565,534,566,535,567,536,584,537,585,538,586,539,587,540,588,541,589,542,590,543,591,544,592,545,593,546,594,547,595,548,596,549,597,550,598,551,599,
};
// tetraplex vertices
float tetraVerts[] = {
	0.5,0.5,0.5,0.5,	0.5,0.5,0.5,-0.5,	0.5,0.5,-0.5,0.5,	0.5,0.5,-0.5,-0.5,
	0.5,-0.5,0.5,0.5,	0.5,-0.5,0.5,-0.5,	0.5,-0.5,-0.5,0.5,	0.5,-0.5,-0.5,-0.5,
	-0.5,0.5,0.5,0.5,	-0.5,0.5,0.5,-0.5,	-0.5,0.5,-0.5,0.5,	-0.5,0.5,-0.5,-0.5,
	-0.5,-0.5,0.5,0.5,	-0.5,-0.5,0.5,-0.5,	-0.5,-0.5,-0.5,0.5,	-0.5,-0.5,-0.5,-0.5,
	0,0,0,1,	0,0,0,-1,	0,0,1,0,	0,0,-1,0,	0,1,0,0,	0,-1,0,0,	1,0,0,0,	-1,0,0,0,
	0.5*phi,0.5,0.5/phi,0,		0.5*phi,0.5,-0.5/phi,0,		0.5*phi,-0.5,0.5/phi,0,		0.5*phi,-0.5,-0.5/phi,0,
	-0.5*phi,0.5,0.5/phi,0,		-0.5*phi,0.5,-0.5/phi,0,	-0.5*phi,-0.5,0.5/phi,0,	-0.5*phi,-0.5,-0.5/phi,0,
	0.5*phi,0.5/phi,0,0.5,		0.5*phi,0.5/phi,0,-0.5,		0.5*phi,-0.5/phi,0,0.5,		0.5*phi,-0.5/phi,0,-0.5,
	-0.5*phi,0.5/phi,0,0.5,		-0.5*phi,0.5/phi,0,-0.5,	-0.5*phi,-0.5/phi,0,0.5,	-0.5*phi,-0.5/phi,0,-0.5,
	0.5*phi,0,0.5,0.5/phi,		0.5*phi,0,0.5,-0.5/phi,		0.5*phi,0,-0.5,0.5/phi,		0.5*phi,0,-0.5,-0.5/phi,
	-0.5*phi,0,0.5,0.5/phi,		-0.5*phi,0,0.5,-0.5/phi,	-0.5*phi,0,-0.5,0.5/phi,	-0.5*phi,0,-0.5,-0.5/phi,
	0.5,0.5*phi,0,0.5/phi,		0.5,0.5*phi,0,-0.5/phi,		0.5,-0.5*phi,0,0.5/phi,		0.5,-0.5*phi,0,-0.5/phi,
	-0.5,0.5*phi,0,0.5/phi,		-0.5,0.5*phi,0,-0.5/phi,	-0.5,-0.5*phi,0,0.5/phi,	-0.5,-0.5*phi,0,-0.5/phi,
	0.5,0.5/phi,0.5*phi,0,		0.5,0.5/phi,-0.5*phi,0,		0.5,-0.5/phi,0.5*phi,0,		0.5,-0.5/phi,-0.5*phi,0,
	-0.5,0.5/phi,0.5*phi,0,		-0.5,0.5/phi,-0.5*phi,0,	-0.5,-0.5/phi,0.5*phi,0,	-0.5,-0.5/phi,-0.5*phi,0,
	0.5,0,0.5/phi,0.5*phi,		0.5,0,0.5/phi,-0.5*phi,		0.5,0,-0.5/phi,0.5*phi,		0.5,0,-0.5/phi,-0.5*phi,
	-0.5,0,0.5/phi,0.5*phi,		-0.5,0,0.5/phi,-0.5*phi,	-0.5,0,-0.5/phi,0.5*phi,	-0.5,0,-0.5/phi,-0.5*phi,
	0.5/phi,0.5*phi,0.5,0,		0.5/phi,0.5*phi,-0.5,0,		0.5/phi,-0.5*phi,0.5,0,		0.5/phi,-0.5*phi,-0.5,0,
	-0.5/phi,0.5*phi,0.5,0,		-0.5/phi,0.5*phi,-0.5,0,	-0.5/phi,-0.5*phi,0.5,0,	-0.5/phi,-0.5*phi,-0.5,0,
	0.5/phi,0.5,0,0.5*phi,		0.5/phi,0.5,0,-0.5*phi,		0.5/phi,-0.5,0,0.5*phi,		0.5/phi,-0.5,0,-0.5*phi,
	-0.5/phi,0.5,0,0.5*phi,		-0.5/phi,0.5,0,-0.5*phi,	-0.5/phi,-0.5,0,0.5*phi,	-0.5/phi,-0.5,0,-0.5*phi,
	0.5/phi,0,0.5*phi,0.5,		0.5/phi,0,0.5*phi,-0.5,		0.5/phi,0,-0.5*phi,0.5,		0.5/phi,0,-0.5*phi,-0.5,
	-0.5/phi,0,0.5*phi,0.5,		-0.5/phi,0,0.5*phi,-0.5,	-0.5/phi,0,-0.5*phi,0.5,	-0.5/phi,0,-0.5*phi,-0.5,
	0,0.5*phi,0.5/phi,0.5,		0,0.5*phi,0.5/phi,-0.5,		0,0.5*phi,-0.5/phi,0.5,		0,0.5*phi,-0.5/phi,-0.5,
	0,-0.5*phi,0.5/phi,0.5,		0,-0.5*phi,0.5/phi,-0.5,	0,-0.5*phi,-0.5/phi,0.5,	0,-0.5*phi,-0.5/phi,-0.5,
	0,0.5,0.5*phi,0.5/phi,		0,0.5,0.5*phi,-0.5/phi,		0,0.5,-0.5*phi,0.5/phi,		0,0.5,-0.5*phi,-0.5/phi,
	0,-0.5,0.5*phi,0.5/phi,		0,-0.5,0.5*phi,-0.5/phi,	0,-0.5,-0.5*phi,0.5/phi,	0,-0.5,-0.5*phi,-0.5/phi,
	0,0.5/phi,0.5,0.5*phi,		0,0.5/phi,0.5,-0.5*phi,		0,0.5/phi,-0.5,0.5*phi,		0,0.5/phi,-0.5,-0.5*phi,
	0,-0.5/phi,0.5,0.5*phi,		0,-0.5/phi,0.5,-0.5*phi,	0,-0.5/phi,-0.5,0.5*phi,	0,-0.5/phi,-0.5,-0.5*phi,
};
// tetraplex edges: connections between vertex indices
int tetraOrdering[] = {
	0,24,0,32,0,40,0,48,0,56,0,64,0,72,0,80,0,88,0,96,0,104,0,112,1,24,1,33,1,41,1,49,1,56,1,65,1,72,1,81,1,89,1,97,1,105,1,113,2,25,2,32,2,42,2,48,2,57,2,66,2,73,2,80,2,90,2,98,2,106,2,114,3,25,3,33,3,43,3,49,3,57,3,67,3,73,3,81,3,91,3,99,3,107,3,115,4,26,4,34,4,40,4,50,4,58,4,64,4,74,4,82,4,88,4,100,4,108,4,116,5,26,5,35,5,41,5,51,5,58,5,65,5,74,5,83,5,89,5,101,5,109,5,117,6,27,6,34,6,42,6,50,6,59,6,66,6,75,6,82,6,90,6,102,6,110,6,118,7,27,7,35,7,43,7,51,7,59,7,67,7,75,7,83,7,91,7,103,7,111,7,119,8,28,8,36,8,44,8,52,8,60,8,68,8,76,8,84,8,92,8,96,8,104,8,112,9,28,9,37,9,45,9,53,9,60,9,69,9,76,9,85,9,93,9,97,9,105,9,113,10,29,10,36,10,46,10,52,10,61,10,70,10,77,10,84,10,94,10,98,10,106,10,114,11,29,11,37,11,47,11,53,11,61,11,71,11,77,11,85,11,95,11,99,11,107,11,115,12,30,12,38,12,44,12,54,12,62,12,68,12,78,12,86,12,92,12,100,12,108,12,116,13,30,13,39,13,45,13,55,13,62,13,69,13,78,13,87,13,93,13,101,13,109,13,117,14,31,14,38,14,46,14,54,14,63,14,70,14,79,14,86,14,94,14,102,14,110,14,118,15,31,15,39,15,47,15,55,15,63,15,71,15,79,15,87,15,95,15,103,15,111,15,119,16,64,16,66,16,68,16,70,16,80,16,82,16,84,16,86,16,112,16,114,16,116,16,118,17,65,17,67,17,69,17,71,17,81,17,83,17,85,17,87,17,113,17,115,17,117,17,119,18,56,18,58,18,60,18,62,18,88,18,89,18,92,18,93,18,104,18,105,18,108,18,109,19,57,19,59,19,61,19,63,19,90,19,91,19,94,19,95,19,106,19,107,19,110,19,111,20,48,20,49,20,52,20,53,20,72,20,73,20,76,20,77,20,96,20,97,20,98,20,99,21,50,21,51,21,54,21,55,21,74,21,75,21,78,21,79,21,100,21,101,21,102,21,103,22,24,22,25,22,26,22,27,22,32,22,33,22,34,22,35,22,40,22,41,22,42,22,43,23,28,23,29,23,30,23,31,23,36,23,37,23,38,23,39,23,44,23,45,23,46,23,47,24,25,24,32,24,33,24,40,24,41,24,48,24,49,24,56,24,72,25,32,25,33,25,42,25,43,25,48,25,49,25,57,25,73,26,27,26,34,26,35,26,40,26,41,26,50,26,51,26,58,26,74,27,34,27,35,27,42,27,43,27,50,27,51,27,59,27,75,28,29,28,36,28,37,28,44,28,45,28,52,28,53,28,60,28,76,29,36,29,37,29,46,29,47,29,52,29,53,29,61,29,77,30,31,30,38,30,39,30,44,30,45,30,54,30,55,30,62,30,78,31,38,31,39,31,46,31,47,31,54,31,55,31,63,31,79,32,34,32,40,32,42,32,48,32,64,32,66,32,80,33,35,33,41,33,43,33,49,33,65,33,67,33,81,34,40,34,42,34,50,34,64,34,66,34,82,35,41,35,43,35,51,35,65,35,67,35,83,36,38,36,44,36,46,36,52,36,68,36,70,36,84,37,39,37,45,37,47,37,53,37,69,37,71,37,85,38,44,38,46,38,54,38,68,38,70,38,86,39,45,39,47,39,55,39,69,39,71,39,87,40,41,40,56,40,58,40,64,40,88,41,56,41,58,41,65,41,89,42,43,42,57,42,59,42,66,42,90,43,57,43,59,43,67,43,91,44,45,44,60,44,62,44,68,44,92,45,60,45,62,45,69,45,93,46,47,46,61,46,63,46,70,46,94,47,61,47,63,47,71,47,95,48,49,48,72,48,73,48,80,48,96,48,98,49,72,49,73,49,81,49,97,49,99,50,51,50,74,50,75,50,82,50,100,50,102,51,74,51,75,51,83,51,101,51,103,52,53,52,76,52,77,52,84,52,96,52,98,53,76,53,77,53,85,53,97,53,99,54,55,54,78,54,79,54,86,54,100,54,102,55,78,55,79,55,87,55,101,55,103,56,58,56,72,56,88,56,89,56,104,56,105,57,59,57,73,57,90,57,91,57,106,57,107,58,74,58,88,58,89,58,108,58,109,59,75,59,90,59,91,59,110,59,111,60,62,60,76,60,92,60,93,60,104,60,105,61,63,61,77,61,94,61,95,61,106,61,107,62,78,62,92,62,93,62,108,62,109,63,79,63,94,63,95,63,110,63,111,64,66,64,80,64,82,64,88,64,112,64,116,65,67,65,81,65,83,65,89,65,113,65,117,66,80,66,82,66,90,66,114,66,118,67,81,67,83,67,91,67,115,67,119,68,70,68,84,68,86,68,92,68,112,68,116,69,71,69,85,69,87,69,93,69,113,69,117,70,84,70,86,70,94,70,114,70,118,71,85,71,87,71,95,71,115,71,119,72,76,72,96,72,97,72,104,72,105,73,77,73,98,73,99,73,106,73,107,74,78,74,100,74,101,74,108,74,109,75,79,75,102,75,103,75,110,75,111,76,96,76,97,76,104,76,105,77,98,77,99,77,106,77,107,78,100,78,101,78,108,78,109,79,102,79,103,79,110,79,111,80,84,80,96,80,98,80,112,80,114,81,85,81,97,81,99,81,113,81,115,82,86,82,100,82,102,82,116,82,118,83,87,83,101,83,103,83,117,83,119,84,96,84,98,84,112,84,114,85,97,85,99,85,113,85,115,86,100,86,102,86,116,86,118,87,101,87,103,87,117,87,119,88,92,88,104,88,108,88,112,88,116,89,93,89,105,89,109,89,113,89,117,90,94,90,106,90,110,90,114,90,118,91,95,91,107,91,111,91,115,91,119,92,104,92,108,92,112,92,116,93,105,93,109,93,113,93,117,94,106,94,110,94,114,94,118,95,107,95,111,95,115,95,119,96,98,96,104,96,112,97,99,97,105,97,113,98,106,98,114,99,107,99,115,100,102,100,108,100,116,101,103,101,109,101,117,102,110,102,118,103,111,103,119,104,105,104,112,105,113,106,107,106,114,107,115,108,109,108,116,109,117,110,111,110,118,111,119,112,116,113,117,114,118,115,119,
};
// Note:
// polytope name	# of verts		# of edges		# of cells
// 4-simplex		5				10				5-cell
// tesseract		16				32				8-cell
// 4-orthoplex		8				24				16-cell
// octaplex			24				96				24-cell
// dodecaplex		600				1200			120-cell
// tetraplex		120				720				600-cell
int vertNumList[] = { 5, 16, 8, 24, 600, 120 };
int edgeNumList[] = { 10, 32, 24, 96, 1200, 720 };
float * vertList[] = { simplexVerts, tessVerts, orthoVerts, octaVerts, dodecaVerts, tetraVerts };
int * orderingList[] = { simplexOrdering, tessOrdering, orthoOrdering, octaOrdering, dodecaOrdering, tetraOrdering };
LinearMapR4 * vertsMats;
LinearMapR4 * edgesMats;

float * unitVerts;	// points to one of the vertex arrays above
float * verts;		// has a copy of unitVerts, but is changed based on xw rotation
int * ordering;		// points to one of the ordering arrays above
int idx = 0;
int nVertices = 5;
int nEdges = 10;

bool rotateOn = true;
// *******************************
// For spheres and a cylinder
// *******************************
GlGeomSphere texSphere(4, 4);
GlGeomCylinder texCylinder(4, 4, 4);
// ************************
// General data helping with setting up VAO (Vertex Array Objects)
//    and Vertex Buffer Objects.
// ***********************
const int NumObjects = 5;
const int iFloor = 0;
const int iWallB = 1;
const int iWallL = 2;
const int iWallF = 3;
const int iWallR = 4;
unsigned int myVBO[NumObjects];  // a Vertex Buffer Object holds an array of data
unsigned int myVAO[NumObjects];  // a Vertex Array Object - holds info about an array of vertex data;
unsigned int myEBO[NumObjects];  // a Element Array Buffer Object - holds an array of elements (vertex indices)

// ********************************************
// This sets up for texture maps. It is called only once
// ********************************************
void SetupForTextures()
{
	// This material goes under the textures.
	// IF YOU WISH, YOU MAY DEFINE MORE THAN ONE OF THESE TO DIFFERENT GEOMETRIES
	materialUnderTexture.SpecularColor.Set(0.9, 0.9, 0.9);
	materialUnderTexture.AmbientColor.Set(0.3, 0.3, 0.3);
	materialUnderTexture.DiffuseColor.Set(0.7, 0.7, 0.7);       // Increase or decrease to adjust brightness
	materialUnderTexture.SpecularExponent = 40.0;
	// Load texture maps
	RgbImage texMap;
	glUseProgram(shaderProgramBitmap);
	glActiveTexture(GL_TEXTURE0);
	glGenTextures(NumTextures, TextureNames);
	for (int i = 0; i < NumTextures; i++) {
		texMap.LoadBmpFile(TextureFiles[i]);            // Read i-th texture from the i-th file.
		glBindTexture(GL_TEXTURE_2D, TextureNames[i]);  // Bind (select) the i-th OpenGL texture
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);
		// Set best quality filtering.   Also see below for disabling mipmaps.
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR_MIPMAP_LINEAR);  // Requires that mipmaps be generated (see below)
																						 // You may also try GL_LINEAR_MIPMAP_NEAREST -- try looking at the wall from a 30 degree angle, and look for sweeping transitions.
																						 // Store the texture into the OpenGL texture named TextureNames[i]
		int textureWidth = texMap.GetNumCols();
		int textureHeight = texMap.GetNumRows();
		glTexImage2D(GL_TEXTURE_2D, 0, GL_RGB, textureWidth, textureHeight, 0, GL_RGB, GL_UNSIGNED_BYTE, texMap.ImageData());
#if 1
		// Use mipmaps  (Best!)
		glGenerateMipmap(GL_TEXTURE_2D);
#else
		// Don't use mipmaps.  Try moving away from the brick wall a great distance
		glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
#endif
	}
	// Make sure that the shaderProgramBitmap uses the GL_TEXTURE_0 texture.
	glUseProgram(shaderProgramBitmap);
	glUniform1i(glGetUniformLocation(shaderProgramBitmap, "theTextureMap"), 0);
	glActiveTexture(GL_TEXTURE0);
}

// **********************
// This sets up geometries
//  It is called only once.
// **********************
void MySetupSurfaces() {
	// change vertices of dodecaplex such that the edge lengths are all 0.6
	for (int i = 0; i < 4 * vertNumList[4]; i++) {
		dodecaVerts[i] /= (3 - sq5)/0.6f;
	}
	// change vertices of tetraplex such that all edge lengths are 1
	for (int i = 0; i < 4 * vertNumList[5]; i++) {
		tetraVerts[i] *= phi;
	}

	texSphere.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);
	texCylinder.InitializeAttribLocations(vertPos_loc, vertNormal_loc, vertTexCoords_loc);

	// Initialize the VAO's, VBO's and EBO's for the ground plane, the back wall
	// and the surface of rotation. Gives them the "vertPos" location,
	// and the "vertNormal"  and the "vertTexCoords" locations in the shader program.
	// No data is loaded into the VBO's or EBO's for the circular surface until the "Remesh"
	//   routines is called
	glGenVertexArrays(NumObjects, &myVAO[0]);
	glGenBuffers(NumObjects, &myVBO[0]);
	glGenBuffers(NumObjects, &myEBO[0]);
	// For the Floor:
	// Allocate the needed Vertex Array Objects (VAO's),
	//      Vertex Buffer Objects (VBO's) and Element Array Buffer Objects (EBO's)
	// Since the floor has only four vertices.  Each vertex stores its
	//    position, its normal (0,1,0) and its (s,t)-coordinates.
	// YOU DO NOT NEED TO REMESH THE FLOOR (OR THE BACK WALL) SINCE WE USE PHONG INTERPOLATION
	float floorVerts[] = {
		// Position              					 // Normal                  // Texture coordinates
		-wallScale, -0.5f*wallScale, -wallScale,      0.0f, 1.0f, 0.0f,          0.0f, 1.0f,         // Back left
		wallScale, -0.5f*wallScale, -wallScale,      0.0f, 1.0f, 0.0f,          1.0f, 1.0f,         // Back right
		wallScale, -0.5f*wallScale,  wallScale,      0.0f, 1.0f, 0.0f,          1.0f, 0.0f,         // Front right
		-wallScale, -0.5f*wallScale,  wallScale,      0.0f, 1.0f, 0.0f,          0.0f, 0.0f,         // Front left
	};
	unsigned int floorElts[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[iFloor]);
	glBindVertexArray(myVAO[iFloor]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(floorVerts), floorVerts, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(vertPos_loc);
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(vertNormal_loc);
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(vertTexCoords_loc);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iFloor]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(floorElts) * sizeof(unsigned int), floorElts, GL_STATIC_DRAW);

	// BACK WALL
	float wallVertsB[] = {
		-wallScale, -0.5f*wallScale, -wallScale,	0.0f, 0.0f, 1.0f,		0.0f, 1.0f,
		-wallScale, 1.5f*wallScale, -wallScale,		0.0f, 0.0f, 1.0f,		0.0f, 0.0f,
		wallScale, 1.5f*wallScale, -wallScale,		0.0f, 0.0f, 1.0f,		1.0f, 0.0f,
		wallScale, -0.5f*wallScale, -wallScale,		0.0f, 0.0f, 1.0f,		1.0f, 1.0f,
	};
	unsigned int wallEltsB[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWallB]);
	glBindVertexArray(myVAO[iWallB]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(wallVertsB), wallVertsB, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(vertPos_loc);
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(vertNormal_loc);
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(vertTexCoords_loc);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWallB]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallEltsB) * sizeof(unsigned int), wallEltsB, GL_STATIC_DRAW);

	// LEFT WALL
	float wallVertsL[] = {
		-wallScale, -0.5f*wallScale, wallScale,		0.0f, 0.0f, 1.0f,		0.0f, 1.0f,
		-wallScale, 1.5f*wallScale, wallScale,		0.0f, 0.0f, 1.0f,		0.0f, 0.0f,
		-wallScale, 1.5f*wallScale, -wallScale,		0.0f, 0.0f, 1.0f,		1.0f, 0.0f,
		-wallScale, -0.5f*wallScale, -wallScale,	0.0f, 0.0f, 1.0f,		1.0f, 1.0f,
	};
	unsigned int wallEltsL[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWallL]);
	glBindVertexArray(myVAO[iWallL]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(wallVertsL), wallVertsL, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(vertPos_loc);
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(vertNormal_loc);
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(vertTexCoords_loc);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWallL]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallEltsL) * sizeof(unsigned int), wallEltsL, GL_STATIC_DRAW);

	// FRONT WALL
	float wallVertsF[] = {
		wallScale, -0.5f*wallScale, wallScale,		0.0f, 0.0f, 1.0f,		0.0f, 1.0f,
		wallScale, 1.5f*wallScale, wallScale,		0.0f, 0.0f, 1.0f,		0.0f, 0.0f,
		-wallScale, 1.5f*wallScale, wallScale,		0.0f, 0.0f, 1.0f,		1.0f, 0.0f,
		-wallScale, -0.5f*wallScale, wallScale,		0.0f, 0.0f, 1.0f,		1.0f, 1.0f,
	};
	unsigned int wallEltsF[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWallF]);
	glBindVertexArray(myVAO[iWallF]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(wallVertsF), wallVertsF, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(vertPos_loc);
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(vertNormal_loc);
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(vertTexCoords_loc);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWallF]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallEltsF) * sizeof(unsigned int), wallEltsF, GL_STATIC_DRAW);

	// RIGHT WALL
	float wallVertsR[] = {
		wallScale, -0.5f*wallScale, -wallScale,		0.0f, 0.0f, 1.0f,		0.0f, 1.0f,
		wallScale, 1.5f*wallScale, -wallScale,		0.0f, 0.0f, 1.0f,		0.0f, 0.0f,
		wallScale, 1.5f*wallScale, wallScale,		0.0f, 0.0f, 1.0f,		1.0f, 0.0f,
		wallScale, -0.5f*wallScale, wallScale,		0.0f, 0.0f, 1.0f,		1.0f, 1.0f,
	};
	unsigned int wallEltsR[] = { 0, 3, 1, 2 };
	glBindBuffer(GL_ARRAY_BUFFER, myVBO[iWallR]);
	glBindVertexArray(myVAO[iWallR]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(wallVertsR), wallVertsR, GL_STATIC_DRAW);
	glVertexAttribPointer(vertPos_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)0);
	glEnableVertexAttribArray(vertPos_loc);
	glVertexAttribPointer(vertNormal_loc, 3, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(3 * sizeof(float)));
	glEnableVertexAttribArray(vertNormal_loc);
	glVertexAttribPointer(vertTexCoords_loc, 2, GL_FLOAT, GL_FALSE, 8 * sizeof(float), (void*)(6 * sizeof(float)));
	glEnableVertexAttribArray(vertTexCoords_loc);
	glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, myEBO[iWallR]);
	glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(wallEltsR) * sizeof(unsigned int), wallEltsR, GL_STATIC_DRAW);

	check_for_opengl_errors();
}

void MyRemeshGeometries()
{
	// IT IS NOT NECESSARY TO REMESH EITHER THE FLOOR OR THE BACK WALL
	texSphere.Remesh(meshRes, meshRes);
	texCylinder.Remesh(meshRes, meshRes, meshRes);
	check_for_opengl_errors();      // Watch the console window for error messages!
}

void MyRenderGeometries() {
	float matEntries[16]; // Temporary storage for floats

	// Render the walls

	selectShaderProgram(shaderProgramProc);

	glUniform1i(glGetUniformLocation(shaderProgramProc, "mode"), mode); // updates mode in MyShaders to mode
	if (tSpinMode || abs(textureTime) < 0.0000001) {
		glUniform1f(glGetUniformLocation(shaderProgramProc, "texTime"), (float)textureTime); // updates texTime in MyShaders to textureTime
	}

	if (polytopeOnly){
		// back wall
		glBindVertexArray(myVAO[iWallB]);
		materialUnderTexture.LoadIntoShaders();
		viewMatrix.DumpByColumns(matEntries);
		glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
		glBindTexture(GL_TEXTURE_2D, TextureNames[0]);
		glUniform1i(applyTextureLocation, true);
		glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);

		// left wall
		glBindVertexArray(myVAO[iWallL]);
		materialUnderTexture.LoadIntoShaders();
		viewMatrix.DumpByColumns(matEntries);
		glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
		glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);

		// front wall
		glBindVertexArray(myVAO[iWallF]);
		materialUnderTexture.LoadIntoShaders();
		viewMatrix.DumpByColumns(matEntries);
		glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
		glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);

		// right wall
		glBindVertexArray(myVAO[iWallR]);
		materialUnderTexture.LoadIntoShaders();
		viewMatrix.DumpByColumns(matEntries);
		glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
		glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
		glUniform1i(applyTextureLocation, false);
	}

	// Render floor

	selectShaderProgram(shaderProgramBitmap);

	{
		glBindVertexArray(myVAO[iFloor]);
		materialUnderTexture.LoadIntoShaders();
		viewMatrix.DumpByColumns(matEntries);
		glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
		glBindTexture(GL_TEXTURE_2D, TextureNames[1]);
		glUniform1i(applyTextureLocation, true);
		glDrawElements(GL_TRIANGLE_STRIP, 4, GL_UNSIGNED_INT, (void*)0);
		glUniform1i(applyTextureLocation, false);
		check_for_opengl_errors();
	}

	// Render the wireframe

	{
		LinearMapR4 polytopeMat = viewMatrix;
		polytopeMat.Mult_glTranslate(0, 4.0, 0);
		polytopeMat.Mult_glScale(polytopeScale);

		{
			if (mode < 0 || mode > nPolytopes) {	
				printf("Warning: invalid mode detected. Switching to simplex mode...\n");
				mode = 0;
			}
			nVertices = vertNumList[mode];
			nEdges = edgeNumList[mode];
			unitVerts = vertList[mode];
			ordering = orderingList[mode];

			verts = (float*)malloc(4 * nVertices * sizeof(float));
			vertsMats = (LinearMapR4*)malloc(4 * nVertices * sizeof(LinearMapR4));
			edgesMats = (LinearMapR4*)malloc(4 * nEdges * sizeof(LinearMapR4));
			if (verts == NULL) {
				fprintf(stderr, "Error: cannot allocate %d bytes for vertex array.\n", 4 * nVertices * sizeof(float));
				if (vertsMats == NULL) {
					fprintf(stderr, "Error: cannot allocate %d bytes for vertex matrices array.\n", 4 * nVertices * sizeof(LinearMapR4));
				}
				if (edgesMats == NULL) {
					fprintf(stderr, "Error: cannot allocate %d bytes for edge matrices array.\n", 4 * nEdges * sizeof(LinearMapR4));
				}
				return;
			}

			for (int i = 0; i < 4 * nVertices; i++) {
				verts[i] = unitVerts[i];
				verts[i] *= (float)(vScale / sq2);
			}
			
			for (int i = 0; i < nVertices; i++) {
				float c1 = (float)cos(PI2*thetas[0]);	float s1 = (float)sin(PI2*thetas[0]);
				float c2 = (float)cos(PI2*thetas[1]);	float s2 = (float)sin(PI2*thetas[1]);
				float c3 = (float)cos(PI2*thetas[2]);	float s3 = (float)sin(PI2*thetas[2]);
				float c4 = (float)cos(PI2*thetas[3]);	float s4 = (float)sin(PI2*thetas[3]);
				float c5 = (float)cos(PI2*thetas[4]);	float s5 = (float)sin(PI2*thetas[4]);
				float c6 = (float)cos(PI2*thetas[5]);	float s6 = (float)sin(PI2*thetas[5]);
				verts[4 * i + 0] = (float)(vScale / sq2) * (
					unitVerts[4 * i + 0] * (c1*c2*c3) +
					unitVerts[4 * i + 1] * (c1*c2*s3*s5 - c5 * (c4*s1 - c1 * s2*s4)) +
					unitVerts[4 * i + 2] * (c6*(s1*s4 + c1 * c4*s2) - s6 * (s5*(c4*s1 - c1 * s2*s4) + c1 * c2*c5*s3)) +
					unitVerts[4 * i + 3] * (-s6 * (s1*s4 + c1 * c4*s2) - c6 * (s5*(c4*s1 - c1 * s2*s4) + c1 * c2*c5*s3))
					);
				verts[4 * i + 1] = (float)(vScale / sq2) * (
					unitVerts[4 * i + 0] * (c2*c3*s1) +
					unitVerts[4 * i + 1] * (c5*(c1*c4 + s1 * s2*s4) + c2 * s1*s3*s5) +
					unitVerts[4 * i + 2] * (s6*(s5*(c1*c4 + s1 * s2*s4) - c2 * c5*s1*s3) - c6 * (c1*s4 - c4 * s1*s2)) +
					unitVerts[4 * i + 3] * (s6*(c1*s4 - c4 * s1*s2) + c6 * (s5*(c1*c4 + s1 * s2*s4) - c2 * c5*s1*s3))
					);
				verts[4 * i + 2] = (float)(vScale / sq2) * (
					unitVerts[4 * i + 0] * (-c3 * s2) +
					unitVerts[4 * i + 1] * (c2*c5*s4 - s2 * s3*s5) +
					unitVerts[4 * i + 2] * (s6*(c5*s2*s3 + c2 * s4*s5) + c2 * c4*c6) +
					unitVerts[4 * i + 3] * (c6*(c5*s2*s3 + c2 * s4*s5) - c2 * c4*s6)
					);
				// this calculation is optional since we cannot render the fourth dimensional coordinate
				verts[4 * i + 3] = (float)(vScale / sq2) * (
					unitVerts[4 * i + 0] * (s3)+
					unitVerts[4 * i + 1] * (-c3 * s5) +
					unitVerts[4 * i + 2] * (c3*c5*s6) +
					unitVerts[4 * i + 3] * (c3*c5*c6)
					);
			}

			// initializing the matrices for the vertices (spheres) and edges (cylinders)
			for (int i = 0; i < nVertices; i++) {
				vertsMats[i] = polytopeMat;
			}
			for (int i = 0; i < nEdges; i++) {
				edgesMats[i] = polytopeMat;
			}

			for (int i = 0; i < nVertices; i++) {
				vertsMats[i].Mult_glTranslate(verts[4 * i], verts[4 * i + 1], verts[4 * i + 2]);
				vertsMats[i].Mult_glScale(shapeRadius);
				vertsMats[i].DumpByColumns(matEntries);
				glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
				glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
				glUniform1i(applyTextureLocation, true);
				texSphere.Render();
				glUniform1i(applyTextureLocation, false);
				vertsMats[i].Mult_glScale(1 / shapeRadius);
			}

			if (!vertsOnly) {
				int i, j;
				for (idx = 0; idx < nEdges; idx++) {
					i = ordering[2 * idx];
					j = ordering[2 * idx + 1];
					x_1 = verts[4 * i]; y_1 = verts[4 * i + 1]; z_1 = verts[4 * i + 2];
					x_2 = verts[4 * j]; y_2 = verts[4 * j + 1]; z_2 = verts[4 * j + 2];
					normD = sqrt(pow(x_2 - x_1, 2) + pow(y_2 - y_1, 2) + pow(z_2 - z_1, 2));
					edgesMats[idx] = vertsMats[i];
					edgesMats[idx].Mult_glTranslate(0.5*(x_2 - x_1), 0.5*(y_2 - y_1), 0.5*(z_2 - z_1));
					if (pow(z_2 - z_1, 2) + pow(x_2 - x_1, 2) > 0) {
						edgesMats[idx].Mult_glRotate(atan2(sqrt(pow(x_2 - x_1, 2) + pow(z_2 - z_1, 2)), y_2 - y_1), z_2 - z_1, 0, x_1 - x_2);
					}
					edgesMats[idx].Mult_glScale(0.8, 0.5 * normD, 0.8);
					edgesMats[idx].Mult_glScale(shapeRadius, 1, shapeRadius);
					edgesMats[idx].DumpByColumns(matEntries);
					glUniformMatrix4fv(modelviewMatLocation, 1, false, matEntries);
					glBindTexture(GL_TEXTURE_2D, TextureNames[2]);
					glUniform1i(applyTextureLocation, true);
					texCylinder.Render();
					glUniform1i(applyTextureLocation, false);
				}
			}

			free(verts);
			free(vertsMats);
			free(edgesMats);
		}
		/**/
	}

	check_for_opengl_errors();      // Watch the console window for error messages!
}
